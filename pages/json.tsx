import Head from "next/head";
import { useReducer } from "react";

const reducer = (state, action) => {
  switch (action.type) {
    case "ADD_PRE_REQ":
      return { ...state, prereqList: [...state.prereqList, ""] };
    case "REMOVE_PRE_REQ":
      return {
        ...state,
        // Using filter not splice because array.splice was triggering reducer twice
        prereqList: state.prereqList.filter((_x, i) => i !== action.i),
      };
    case "CHANGE_PRE_REQ_VALUE":
      state.prereqList[action.id] = action.value;
      return { ...state };
  }
};

const initialState = {
  prereqList: [],
};

export default function JSONBuilder() {
  const [state, dispatch] = useReducer(reducer, initialState);
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <label>
        Title
        <input type="text" />
      </label>
      <label>
        Description
        <input type="text" />
      </label>
      <div>
        <p>Manage pre requisite list</p>
        <button onClick={() => dispatch({ type: "ADD_PRE_REQ" })}>+</button>
      </div>
      <ul>
        Pre-requisite list
        {state.prereqList.map((_item, i) => (
          <li key={`prereq-item-${i}`}>
            <input
              type="text"
              name={`prereq-${i}`}
              onChange={(e) =>
                dispatch({
                  type: "CHANGE_PRE_REQ_VALUE",
                  value: e.target.value,
                  i,
                })
              }
              value={state.prereqList[i]}
            />
            <button onClick={() => dispatch({ type: "REMOVE_PRE_REQ", id: i })}>
              -
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
}
